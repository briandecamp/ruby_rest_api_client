#!/usr/bin/ruby
# for this code to work, you will need to have the Faraday gem (https://github.com/lostisland/faraday)
# installed on your system:
#
# gem install faraday

# /etc/oracle/ultradns.json:
# {
#  "username" : <username>,
#  "password" : <password>,
#  "galaxy" : "us2",
#  "zone" : "opcstorage.com.",
#  "subzone" : "bdecamp"
# }

require_relative 'rest_client'
require 'json'
require 'socket'

class BootstrapDNS
  attr_accessor :galaxy
  
  def initialize
    properties = JSON.parse(File.read('/etc/oracle/ultradns.json'))
    @con = UltraRestApi::RestClient.new(properties['username'], properties['password'])
    @galaxy = properties['galaxy']
    @zone = properties['zone']
    @subzone = properties['subzone']
    addresses = Socket.ip_address_list.reject {|a| !a.ipv4? || a.ipv4_loopback? || a.ip_address.start_with?("192.168")}.map {|a| a.ip_address}
    if addresses.size < 1
      raise RuntimeError, "no valid IP Address for local machine"
    end
    puts "IPv4: #{addresses}"
    
    @current_ip_address = addresses[0]
    puts "Current IP Address: #{@current_ip_address}"
  end

  def list_rrsets
    rrsets = @con.get_rrsets_by_type(@zone, "A", {q: {owner: "#{@galaxy}.#{@subzone}.#{@zone}"}})
    puts JSON.pretty_generate(rrsets)
  end
  
  def get_rrset(owner_name)
    begin
      # assumes there is only one rdata value
    @con.get_rrsets(@zone, {q: {owner: owner_name}})['rrSets'].find {|r| r['ownerName'].start_with?(owner_name)}
    rescue RuntimeError => err
      if JSON.parse(err.message)[0]['errorCode'] == 70002
        nil
      else
        raise err
      end
    end
  end
  
  def set_address(prefix_name)
    default_profile = {
      "@context" => "http://schemas.ultradns.com/RDPool.jsonschema", 
      "order" => "ROUND_ROBIN",
      "description" => "1"
    }
    default_ttl = 300
    owner_name = "#{prefix_name}.#{@subzone}"
    rrset = get_rrset(owner_name)
    
    if(rrset)
      # assume only one rdata
      existing_ip_address = rrset['rdata'][0]
      if(existing_ip_address == @current_ip_address) 
        puts "#{owner_name} #{existing_ip_address} already set to #{@current_ip_address}"
      else
        puts "Updating #{owner_name} to #{@current_ip_address}"
        profile = rrset['profile']
        ttl = rrset['ttl']
        @con.edit_rrset_profile(@zone, "A", owner_name, ttl, [@current_ip_address], profile)
      end
    else
      puts "Setting #{owner_name} to #{@current_ip_address}"
      @con.create_rrset_profile(@zone, "A", owner_name, default_ttl, [@current_ip_address], default_profile)
    end
  end
end

if __FILE__ == $0
  b = BootstrapDNS.new()
  
  b.set_address "#{b.galaxy}"
  b.set_address "universe1.#{b.galaxy}"
  if (b.galaxy == "us2") 
    b.set_address "universe"
    b.set_address "replication1.#{b.galaxy}"
    b.set_address "replication.#{b.galaxy}"
  end
end
